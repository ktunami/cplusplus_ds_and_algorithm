1. 数组问题多想想值和下标之间的关系

2. 关于排序
   各种排序相互比较 ：https://www.cnblogs.com/gaochundong/p/comparison_sorting_algorithms.html
   各种动图 ： https://blog.csdn.net/yushiyi6453/article/details/76407640

   冒泡排序： 交换相邻
       【算法描述】
          for i: 0 -> n
             for j: 0 -> n-i-1
                如果a[j]和a[j+1]逆序，就互换位置
             每一轮都有最大的数放在倒数第i个位置
       【说明】
          >>> 遇到相等的值不进行交换，能保证稳定性
          >>> 比较次数和数据状态无关，若全逆序则交换次数最多
          >>> 优化1： 如果某趟排序一次都没交换，那么"over"
          >>> 优化2： 记录上一次最后交换的位置，下一轮就比较到那里
          >>> 优化3： 双向冒泡排序

  奇偶排序：
       【算法描述】
            1. 选取所有奇数列的元素与其右侧相邻的元素进行比较，将较小的元素排序在前面；
            2. 选取所有偶数列的元素与其右侧相邻的元素进行比较，将较小的元素排序在前面；
            3. 重复前面两步，直到所有序列有序为止
            可以覆盖数组中的所有元素, 数组中的所有元素形成链状
            算法复杂度分析
       【说明】
                时间复杂度	            空间复杂度	稳定性
        平均情况 	最坏情况	   最好情况
        O(nlogn)	O(nlogn)    O(n) 	 O(1)	    稳定

  快速排序：
       【算法描述】
         如果pivot在左，就从右侧开始(带等号)，判断条件 i < j
         最后i = j，arr[i] = pivot
         然后再在arr[i]的两侧递归调用该排序
       【说明】
         运行时间与划分是否对称有关，最差时间复杂度 O(n2)
         堆排序通常会慢于原地排序的快速排序，但快排有最坏情况发生的机会
         Merge sort最坏O(nlogn)，若非链表，空间复杂度为 O(n) ，快排是O(logn)
         可用用于选第k小的元素， O(n)

  选择排序：
       【算法描述】
         每次选一个最小的放好，交换少，CPU耗时比冒泡少，空间O(n)

  插入排序：
       【算法描述】
         对于未排序数据，在已排序序列中从后向前扫描，找到相应位置，将位置后的已排序数据逐步向后挪位，将新元素插入到该位置

  希尔排序：
       【算法描述】
         下标： 0  1  2  3  4  5  6  7  8  9
         数值： 8  9  1  7  2  3  5  4  6  0

         初始增量：
         5 = len / 2
                    8                   3                         3                    8
                        9                   5             =>          5                    9
                            1                   4                         1                    4
                                 7                  6                         6                    7
                                     2                   0                         0                   2
         增量改为 3
                    8          7           5           0            0          5           7          8
                        9           2          4             =>         2          4          9
                            1            3          6                       1          3           6
        O(n^(1.3—2))

  归并排序：
       【算法描述】
            if (left != right) {
                mid = len/2
                sort(arr, left, mid);
                sort(arr, mid + 1, right);
                Merge(arr,left,mid,right)
                    //p1=L, p2=mid+1
            }

  堆排序：
       【算法描述】
          https://www.cnblogs.com/chengxiao/p/6129630.html
          >>> 堆是完全二叉树，树高Θ(logn)
                     0
                  1      2
              3      4
              当前节点：  i       父：(i - 1)/2
              左子：2i + 1       右子： 2i + 2
          >>> 堆操作
            a. 构建堆 O(n)
               从第一个非叶子结点（len/2 - 1）开始，从下至上，从右至左调整结构 （即c）
            b. 堆顶元素与末尾元素交换，将最大元素"沉"到数组末端
            c. 调整结构，使其满足堆定义
               先取出当前元素i赋给temp
               for(int k=i*2+1;k<length;k=k*2+1)
                  如果子节点大于父节点，将子节点值赋给父节点（父节点是temp）
               arr[i] = temp;
          >>> 优先队列
          #include <queue>  //默认是less，大顶堆
          std::priority_queue<int, std::vector<int>, std::greater<int> > q; //小顶堆

  线性时间排序：
       【算法描述】
        >>> 计数排序 (稳定)
                下标     0   1   2   3   4   5   6   7
                输入A    2   5   3   0   2   3   0   3   （[最小值，最大值] 包含于下标区间）
                中间C    2   0   2   3   0   1            (对每一个进行计数)
                        2   2   4   7   7   8            (累加求最后一个坐标)
                输出B    0   0   2   2   3   3   3   5
                        for  i : len-1 -> 0
                           B[C[A[i]] - 1] = A[i]
                           --C[A[i]]
        >>> 基数排序
                对若干位的诸多十进制数字进行排序。
                按照由低位到高位
                每轮排序必须是稳定的（可用计数排序）
        >>> 桶排序
                前提：假设数据服从均匀分布
                假设数据分布在[0,1]区间上，在该区间划分若干个子区间
                对每个子区间内的数排序，再写到一起
