回溯算法

  【概念】

   1.回溯算法：
       https://blog.csdn.net/gardenpalace/article/details/84625537
       类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径
       e.g. DFS + 减枝 = 回溯
           a）DFS of state space tree
           b）Pruning state space tree: if a node is determined to be non-promising, back track to its parent

           DFS :
           void depth_first_tree_search(node v) {
             visit v
             for( each child u of v) {
                depth_first_tree_search(u);
             }
           }

       The usual scenario is that you are faced with a number of options, and you must choose one of these.
       After you make your choice you will get a new set of options; just what set of options you get depends
       on what choice you made. This procedure is repeated over and over until you reach a final state. If you
       made a good sequence of choices, your final state is a goal state; if you didn't, it isn't.

    Can be used to solve NP-Complete problems such as 0-1 Knapsack more efficiently

   2.问题的解空间：
       一个复杂问题的解决方案是由若干个小的决策步骤组成的决策序列，所以一个问题的解可以表示成解向量X=（x1,x2,.....xn），
       其中分量xi对应第i步的选择，X中个分量xi所有取值的组合构成问题的解向量空间，简称解空间或者解空间树（因为解空间一般用树形式来组织），
       由于一个解向量往往对应问题的某个状态，所以解空间又称为问题的状态空间树。
          解空间树有两种类型。
             子集树：所给的问题是从n个元素的集合S中找到满足某种性质的子集时，相应的解空间树。
             排列树：所给的问题是确定n个元素满足某种性质的排列时，相应的解空间树。

   3.可行解：解空间中满足约束条件的解空间

   4.最优解：解空间中使目标函数取最大或者最小值的可行解



  【一般步骤】

    1、 针对所给问题，定义问题的解空间，它至少包含问题的一个（最优）解。
    2 、确定易于搜索的解空间结构,使得能用回溯法方便地搜索整个解空间。确定结点的扩展搜索规则。
    3 、以深度优先的方式搜索解空间，并且在搜索过程中用剪枝函数避免无效搜索。



  【算法模型】

    https://www.cis.upenn.edu/~matuszek/cit594-2012/Pages/backtracking.html
    ==> 递归模型
    boolean solve(Node n) {
        if n is a leaf node {
            if the leaf is a goal node, return true
            else return false
        } else {
            for each child c of n {
                if solve(c) succeeds, return true
            }
            return false
        }
    }

    ==> 栈模型
    boolean solve(Node n) {
        put node n on the stack;
        while the stack is not empty {
            if the node at the top of the stack is a leaf {
                if it is a goal node, return true
                else pop it off the stack
            } else {
                if the node at the top of the stack has untried children
                    push the next untried child onto the stack
                else pop the node off the stack
            }
        }
        return false
    }
